"use strict";(self.webpackChunkit_security=self.webpackChunkit_security||[]).push([[7482],{15:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250518131650-7f5d0af73a64767b9d8d447bed4d59d3.png"},317:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512223836-81e6c8ac581d4fc1a386f213b3a324c8.png"},387:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512225043-49960b9bea1e24541db467ccb212c5f9.png"},389:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512220020-9f8dba5b416bf111f315619964e26bc7.png"},425:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512213039-33db669b4ad0ca79a8a315d3af95f297.png"},1781:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250518122252-9e2fa7b1bdfbf312c33d33ae2bfb0c7c.png"},2133:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512214001-37c189a774e08e184e90bb051e46d781.png"},3049:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250518140928-8673dca1caad7d0bd9cd4c7f11e6277e.png"},3557:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512224132-057019b8665536055e933293249b6041.png"},3561:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512214500-048525ce584cbb6cc876b0583f826f7e.png"},3618:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512214712-3405af2b9cee71e2960c37b17a85708a.png"},4043:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250518130947-de0ef651c23381a5ac76efc48b3df4d0.png"},5217:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512230641-a418ba64a02244ed4e700d7b0c831004.png"},5961:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512223722-a1eef8836e4dfd81266c42fc7055319f.png"},7348:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"sprint-documentation/sprint-1","title":"Sprint 1 - VM Setup and Initial Configuration","description":"Setting up the Rocky Linux VM, password reset, and initial system configuration","source":"@site/docs/sprint-documentation/sprint-1.md","sourceDirName":"sprint-documentation","slug":"/sprint-documentation/sprint-1","permalink":"/It-Security-Website/docs/sprint-documentation/sprint-1","draft":false,"unlisted":false,"editUrl":"https://github.com/Krydix/It-Security-Website/tree/main/docs/sprint-documentation/sprint-1.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Sprint 1 - VM Setup and Initial Configuration","description":"Setting up the Rocky Linux VM, password reset, and initial system configuration"},"sidebar":"tutorialSidebar","previous":{"title":"Microsoft Windows Security Analysis","permalink":"/It-Security-Website/docs/windows-security-analysis"},"next":{"title":"Sprint 2 - System Hardening and LAMP Stack","permalink":"/It-Security-Website/docs/sprint-documentation/sprint-2"}}');var i=n(4848),d=n(8453);const a={sidebar_position:1,title:"Sprint 1 - VM Setup and Initial Configuration",description:"Setting up the Rocky Linux VM, password reset, and initial system configuration"},r="Sprint 1 - VM Setup and Initial Configuration",o={},h=[{value:"1. Get the VM to run",id:"1-get-the-vm-to-run",level:2},{value:"Install Dependencies",id:"install-dependencies",level:3},{value:"Move the disk image to the standard libvirt directory:",id:"move-the-disk-image-to-the-standard-libvirt-directory",level:4},{value:"Edit the VM XML to point to the correct image path:",id:"edit-the-vm-xml-to-point-to-the-correct-image-path",level:4},{value:"1. Undefine the old VM if it exists:",id:"1-undefine-the-old-vm-if-it-exists",level:4},{value:"2. Define the VM from the edited XML:",id:"2-define-the-vm-from-the-edited-xml",level:3},{value:"3. Start the VM:",id:"3-start-the-vm",level:3},{value:"Virt Manager",id:"virt-manager",level:5},{value:"2. Resetting the password",id:"2-resetting-the-password",level:2},{value:"GRUB settings",id:"grub-settings",level:3},{value:"What it does",id:"what-it-does",level:4},{value:"3. Change Keyboard setting",id:"3-change-keyboard-setting",level:2},{value:"4. Get online",id:"4-get-online",level:2},{value:"5. Update the system",id:"5-update-the-system",level:2},{value:"Do we need to reboot?",id:"do-we-need-to-reboot",level:4},{value:"6. Enable SSH",id:"6-enable-ssh",level:2},{value:"7 Open SSH port to host",id:"7-open-ssh-port-to-host",level:2},{value:"Generate and get copy the SSH keys to our system",id:"generate-and-get-copy-the-ssh-keys-to-our-system",level:2},{value:"View the existing keys",id:"view-the-existing-keys",level:3},{value:"Generate new Keys",id:"generate-new-keys",level:3},{value:"Copy the keys",id:"copy-the-keys",level:3},{value:"Using SSH key to log in",id:"using-ssh-key-to-log-in",level:3}];function c(e){const s={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"sprint-1---vm-setup-and-initial-configuration",children:"Sprint 1 - VM Setup and Initial Configuration"})}),"\n",(0,i.jsx)(s.h2,{id:"1-get-the-vm-to-run",children:"1. Get the VM to run"}),"\n",(0,i.jsx)(s.p,{children:"How to install and run the VM:\nI am on an OpenSuse Linux for the following steps"}),"\n",(0,i.jsxs)(s.p,{children:["first we need to grant virsh access to the file with ",(0,i.jsx)(s.code,{children:"chown"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo chown qemu:qemu /home/christian/Downloads/Rocky9SoSe2025-raw/Rocky9SoSe2025\n"})}),"\n",(0,i.jsx)(s.p,{children:"we can define the VM with the following command (when in the same folder as the xml)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo virsh define Rocky9SoSe2025.xml\n"})}),"\n",(0,i.jsx)(s.h3,{id:"install-dependencies",children:"Install Dependencies"}),"\n",(0,i.jsx)(s.p,{children:"Install required packages:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo zypper install neovim virt-manager virt-viewer libvirt qemu-kvm\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Start and enable the ",(0,i.jsx)(s.code,{children:"libvirtd"})," service:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo systemctl enable --now libvirtd\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Add your user to required groups for managing VMs without ",(0,i.jsx)(s.code,{children:"sudo"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo usermod -aG libvirt,kvm $USER\n"})}),"\n",(0,i.jsxs)(s.p,{children:["we have ",(0,i.jsx)(s.code,{children:"$USER"}),"as an environment variable so it knows out username"]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"Log out and log back in after this step to apply group changes."}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"move-the-disk-image-to-the-standard-libvirt-directory",children:"Move the disk image to the standard libvirt directory:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo mkdir -p /var/lib/libvirt/images/Rocky9SoSe2025\nsudo mv ~/Downloads/Rocky9SoSe2025-raw/Rocky9SoSe2025.raw /var/lib/libvirt/images/Rocky9SoSe2025/\n"})}),"\n",(0,i.jsx)(s.h4,{id:"edit-the-vm-xml-to-point-to-the-correct-image-path",children:"Edit the VM XML to point to the correct image path:"}),"\n",(0,i.jsx)(s.p,{children:"Open the XML file:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo nvim Rocky9SoSe2025.xml\n"})}),"\n",(0,i.jsx)(s.p,{children:"Find this line:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-xml",children:"<source file='/path/to/old/image'/>\n"})}),"\n",(0,i.jsx)(s.p,{children:"Replace it with:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-xml",children:"<source file='/var/lib/libvirt/images/Rocky9SoSe2025/Rocky9SoSe2025.raw'/>\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Save and exit (",(0,i.jsx)(s.code,{children:":wq"}),")."]}),"\n",(0,i.jsx)(s.h4,{id:"1-undefine-the-old-vm-if-it-exists",children:"1. Undefine the old VM if it exists:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo virsh undefine Rocky9SoSe2025\n"})}),"\n",(0,i.jsx)(s.h3,{id:"2-define-the-vm-from-the-edited-xml",children:"2. Define the VM from the edited XML:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo virsh define Rocky9SoSe2025.xml\n"})}),"\n",(0,i.jsx)(s.h3,{id:"3-start-the-vm",children:"3. Start the VM:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo virsh start Rocky9SoSe2025\n"})}),"\n",(0,i.jsx)(s.p,{children:"You should see:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"Domain 'Rocky9SoSe2025' started\n"})}),"\n",(0,i.jsx)(s.p,{children:"We can open the VM like this:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"virt-viewer --connect qemu:///system Rocky9SoSe2025\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Or open ",(0,i.jsx)(s.code,{children:"virt-manager"})," and double-click the VM:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"virt-manager\n"})}),"\n",(0,i.jsx)(s.h5,{id:"virt-manager",children:"Virt Manager"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.img,{alt:"Virt Manager",src:n(9442).A+"",width:"602",height:"639"}),"\nWe use Virtual Machine Manager to manage our Virtual Machine"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"2-resetting-the-password",children:"2. Resetting the password"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"GRUB Boot Screen",src:n(425).A+"",width:"1332",height:"820"})}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:"In GRUB, we press key down to stop the Linux from booting automatically"}),"\n",(0,i.jsxs)(s.li,{children:["We then press ",(0,i.jsx)(s.code,{children:"e"})," to edit the boot sequence"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"grub-settings",children:"GRUB settings"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["change ",(0,i.jsx)(s.code,{children:"ro"})," to ",(0,i.jsx)(s.code,{children:"rw"})," (read only to read write)"]}),"\n",(0,i.jsxs)(s.li,{children:["add ",(0,i.jsx)(s.code,{children:"init=/bin/bash"})," at the end of line after quiet. This will boot us into the bash instead of the password input","\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["Tipp: the keyboard is set to english, for ",(0,i.jsx)(s.code,{children:"="})," we need to press ",(0,i.jsx)(s.code,{children:"\xb4"})," and for ",(0,i.jsx)(s.code,{children:"/"})," it is ",(0,i.jsx)(s.code,{children:"-"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.li,{children:"delete rhgb"}),"\n",(0,i.jsx)(s.li,{children:"When all is done, press Ctrl-x"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["It should look like this:\n",(0,i.jsx)(s.img,{alt:"GRUB Edit Mode",src:n(2133).A+"",width:"1332",height:"820"})]}),"\n",(0,i.jsxs)(s.p,{children:["Now we are in bash:\n",(0,i.jsx)(s.img,{alt:"Bash Shell",src:n(9462).A+"",width:"1332",height:"820"}),"\nto change Password:\npasswd"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Password Change",src:n(3561).A+"",width:"1332",height:"820"})}),"\n",(0,i.jsxs)(s.p,{children:["The Password was changed successfully\nTo reboot without corrupting files, we are\n",(0,i.jsx)(s.img,{alt:"Sync and Remount",src:n(3618).A+"",width:"1332",height:"820"})]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sync\nmount -o remount,ro /\n"})}),"\n",(0,i.jsx)(s.h4,{id:"what-it-does",children:"What it does"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"sync"}),"\nflushed the file system buffers, ensures all pending writes to disk are completed\n",(0,i.jsx)(s.strong,{children:"mount -o remount,ro /"}),"\nRemounts the ",(0,i.jsx)(s.code,{children:"/"})," (root) directory as read only"]}),"\n",(0,i.jsx)(s.p,{children:"Now we can force restart without risking data loss and log in with our newly set password as root"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Login Success",src:n(9103).A+"",width:"1332",height:"820"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"3-change-keyboard-setting",children:"3. Change Keyboard setting"}),"\n",(0,i.jsxs)(s.p,{children:["I need to match it with my host setting\n",(0,i.jsx)(s.img,{alt:"Keyboard Layout",src:n(389).A+"",width:"854",height:"650"}),"\nso the correct command to do this is"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo localectl set-x11-keymap de pc105 mac\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Test: the characters like ",(0,i.jsx)(s.code,{children:"Z"})," or ",(0,i.jsx)(s.code,{children:"-"})," are working as expected. I now have to remember to switch ",(0,i.jsx)(s.code,{children:"Z"})," and ",(0,i.jsx)(s.code,{children:"Y"})," when entering my password\n",(0,i.jsx)(s.img,{alt:"Keyboard Test",src:n(8102).A+"",width:"1332",height:"820"})]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"4-get-online",children:"4. Get online"}),"\n",(0,i.jsx)(s.p,{children:"I used the provided configuration file, to test if I am online I will Ping google.com"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"ping google.com\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Ping Test",src:n(9634).A+"",width:"1332",height:"820"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Result: We are online"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"5-update-the-system",children:"5. Update the system"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Update Check",src:n(8832).A+"",width:"1332",height:"820"})}),"\n",(0,i.jsx)(s.p,{children:"we are checking for available updates with"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo dnf check-update\n"})}),"\n",(0,i.jsx)(s.p,{children:"To actually install them, we are using"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo dnf upgrade\n"})}),"\n",(0,i.jsx)(s.p,{children:"This upgrades the system and installed packages"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.img,{alt:"Update Process",src:n(8286).A+"",width:"1332",height:"820"}),"\nWe are  prompted if we want to continue and press ",(0,i.jsx)(s.code,{children:"y"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Complete!"}),"\n",(0,i.jsx)(s.img,{alt:"Update Complete",src:n(5961).A+"",width:"1332",height:"820"})]}),"\n",(0,i.jsx)(s.h4,{id:"do-we-need-to-reboot",children:"Do we need to reboot?"}),"\n",(0,i.jsx)(s.p,{children:"to find out if the system needs rebooting, we can list all files that are still in use but already deleted on the system"}),"\n",(0,i.jsxs)(s.p,{children:["listing files in use is done with ",(0,i.jsx)(s.code,{children:"sudo lsof"}),", which also shows deleted files. these have ",(0,i.jsx)(s.code,{children:"(deleted)"})," in the end of the line"]}),"\n",(0,i.jsxs)(s.p,{children:["we can therefore pipe the output of ",(0,i.jsx)(s.code,{children:"sudo lsof"}),", which lists the open files on the system into the input of ",(0,i.jsx)(s.code,{children:"grep"}),", which filters the output to only show the lines that contain the word we provide it with (in our case we want to see the lines that contain ",(0,i.jsx)(s.code,{children:"deleted"}),")\nso the command is"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo lsof | grep deleted\n"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"We have deleted files"}),"\n",(0,i.jsx)(s.img,{alt:"Deleted Files Check",src:n(317).A+"",width:"1332",height:"820"})]}),"\n",(0,i.jsx)(s.p,{children:"We can also check the current Kernel version that is running with"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"uname -a\n"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.img,{alt:"Kernel Version",src:n(3557).A+"",width:"1332",height:"820"}),"\nWe can see the current version is 5.14.0-503.14.1 and so on"]}),"\n",(0,i.jsx)(s.p,{children:"and check all installed Kernel versions with"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"ll /boot\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Boot Directory",src:n(387).A+"",width:"1332",height:"820"})}),"\n",(0,i.jsxs)(s.p,{children:["here we can see the current version 5.14.0-503.14.1 and the newly installed one 5.14.0-503.40.1\n",(0,i.jsx)(s.strong,{children:"The old 14.1 Kernel is still running but the 40.1 is installed"})]}),"\n",(0,i.jsx)(s.p,{children:"So we can conclude on the Kernel test that we need to reboot for that as well. Therefore we will do"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo reboot\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Reboot GRUB",src:n(9217).A+"",width:"1332",height:"820"})}),"\n",(0,i.jsx)(s.p,{children:"GRUB has the new Kernel now"}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"6-enable-ssh",children:"6. Enable SSH"}),"\n",(0,i.jsx)(s.p,{children:"we need to make sure the openssh-server is running on startup so we are not locked out when rebooting remotely."}),"\n",(0,i.jsx)(s.p,{children:"therefore we execute the command"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo systemctl enable sshd --now\n"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"systemctl enable"})," is the command to enable services. we want to enable sshd (Open SSH Deamon)\nthe flag ",(0,i.jsx)(s.code,{children:"--now"})," also makes sure it is started now so we don't need to restart"]}),"\n",(0,i.jsx)(s.p,{children:"Now we can confirm if it is set up on startup with"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo systemctl status sshd\n"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.img,{alt:"SSH Status",src:n(5217).A+"",width:"1332",height:"820"}),"\n",(0,i.jsx)(s.strong,{children:"It is enabled and active (running)"})]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"7-open-ssh-port-to-host",children:"7 Open SSH port to host"}),"\n",(0,i.jsx)(s.p,{children:"We need to redirect the SSH port (22) to a different free port on our host system ( we choose 2222) so we can access it from our network."}),"\n",(0,i.jsx)(s.p,{children:"When the VM is running, we can forward the port 22 to 2222 with this command:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"sudo virsh qemu-monitor-command --hmp Rocky9SoSe2025 'hostfwd_add ::2222-:22'\n"})}),"\n",(0,i.jsx)(s.p,{children:"then we log in to the root user by connecting to port 2222 with ssh (since it is running locally localhost works, otherwise it would be the IP of our host machine on port 2222)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"ssh -p 2222 root@localhost\n"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"We are in the VM from our host terminal now"}),"\n",(0,i.jsx)(s.img,{alt:"SSH Connection",src:n(1781).A+"",width:"1052",height:"650"})]}),"\n",(0,i.jsx)(s.h2,{id:"generate-and-get-copy-the-ssh-keys-to-our-system",children:"Generate and get copy the SSH keys to our system"}),"\n",(0,i.jsx)(s.h3,{id:"view-the-existing-keys",children:"View the existing keys"}),"\n",(0,i.jsxs)(s.p,{children:["First we can view the SSH keys that are on the System by showing all the files in the ",(0,i.jsx)(s.code,{children:".ssh"})," folder:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"ls -l ~/.ssh/\n"})}),"\n",(0,i.jsx)(s.p,{children:"actually they are in /etc/ssh"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"ls -l /etc/ssh/\n"})}),"\n",(0,i.jsxs)(s.p,{children:["we see for example a key called ",(0,i.jsx)(s.code,{children:"authorized_keys"})]}),"\n",(0,i.jsx)(s.p,{children:"we can view it with the program cat"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"cat /etc/ssh/ssh_host_ecdsa_key\n"})}),"\n",(0,i.jsx)(s.p,{children:"or since we are in the folder with ls"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"cat ssh_host_ecdsa_key\n"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"here is the existing private key we read"}),"\n",(0,i.jsx)(s.img,{alt:"Existing SSH Key",src:n(4043).A+"",width:"1052",height:"679"})]}),"\n",(0,i.jsx)(s.h3,{id:"generate-new-keys",children:"Generate new Keys"}),"\n",(0,i.jsx)(s.p,{children:"Since we have a copy of the VM images, the keys can be read by anyone with the same VM image and could access it, so we want to remove the existing keys and create our own one."}),"\n",(0,i.jsx)(s.p,{children:"Therefor we delete all files in the .ssh folder"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"rm /etc/ssh/ssh_host_*key*\n"})}),"\n",(0,i.jsxs)(s.p,{children:["we have ",(0,i.jsx)(s.code,{children:"*"}),"  as a wild card character so we remove all ssh keys that fit this pattern"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"no more ssh_host files"}),"\n",(0,i.jsx)(s.img,{alt:"SSH Keys Removed",src:n(15).A+"",width:"1052",height:"679"})]}),"\n",(0,i.jsx)(s.p,{children:"Now we need to re-generate the keys"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"sudo ssh-keygen -A\n"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Keys are here again"}),"\n",(0,i.jsx)(s.img,{alt:"SSH Keys Regenerated",src:n(9763).A+"",width:"1052",height:"679"}),"\nthen we restart the SSH daemon"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"sudo systemctl restart sshd\n"})}),"\n",(0,i.jsx)(s.h3,{id:"copy-the-keys",children:"Copy the keys"}),"\n",(0,i.jsxs)(s.p,{children:["We want to use ",(0,i.jsx)(s.code,{children:"ed25519"})," since it is the newest of the SSH protocols. So this is the key we copy.\nWe want the public key, so for simplicity we can just copy the output of the file to our host since we are in with ssh anyway."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"cat /etc/ssh/ssh_host_ed25519_key.pub\n"})}),"\n",(0,i.jsx)(s.h3,{id:"using-ssh-key-to-log-in",children:"Using SSH key to log in"}),"\n",(0,i.jsx)(s.p,{children:"on our host system we create the ssh key"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"ssh-keygen -t ed25519\n"})}),"\n",(0,i.jsx)(s.p,{children:"copy it to our VM to use it as log in"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"ssh-copy-id -p 2222 root@localhost\n"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"now there are no more passwords needed to log in to our VM"}),"\n",(0,i.jsx)(s.img,{alt:"SSH Key Authentication",src:n(3049).A+"",width:"1052",height:"679"})]})]})}function l(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8102:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512220603-9606c2a8e4b7fa3914eba8eb7aff088e.png"},8286:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512222353-baf53bc5baa25c4c21d5593b0d1e3bc9.png"},8832:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512221707-f388a5c12480115b7b370a8a4cb9e046.png"},9103:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512215655-023b03bc8bb7d912603d3ed870616594.png"},9217:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512225236-a81913ee929ae3cb8808fe4b6e85bd07.png"},9442:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512212800-475f1247eda9b1ae9250d0383eb6fde8.png"},9462:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512214158-3c80fc1f21d87670a61309b894f59a10.png"},9634:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250512220939-0d1c48bec30f635e524e7c7c4c7ce9b2.png"},9763:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/Pasted image 20250518131759-0004d0d29746a9d930ad772aa306046f.png"}}]);