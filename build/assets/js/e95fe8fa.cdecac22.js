"use strict";(self.webpackChunkit_security=self.webpackChunkit_security||[]).push([[8004],{1389:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"production-deployment","title":"Production Deployment - Nginx & Let\'s Encrypt","description":"Complete guide for deploying the IT Security website with Nginx and SSL certificates using Let\'s Encrypt on Linux","source":"@site/docs/production-deployment.md","sourceDirName":".","slug":"/production-deployment","permalink":"/docs/production-deployment","draft":false,"unlisted":false,"editUrl":"https://github.com/Krydix/It-Security-Website/tree/main/docs/production-deployment.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Production Deployment - Nginx & Let\'s Encrypt","description":"Complete guide for deploying the IT Security website with Nginx and SSL certificates using Let\'s Encrypt on Linux"},"sidebar":"tutorialSidebar","previous":{"title":"Sprint 2 - System Hardening and LAMP Stack","permalink":"/docs/sprint-documentation/sprint-2"}}');var s=i(4848),r=i(8453);const a={sidebar_position:3,title:"Production Deployment - Nginx & Let's Encrypt",description:"Complete guide for deploying the IT Security website with Nginx and SSL certificates using Let's Encrypt on Linux"},o="Production Deployment - Nginx & Let's Encrypt",l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"1. Server Preparation",id:"1-server-preparation",level:2},{value:"Update System Packages",id:"update-system-packages",level:3},{value:"Install Required Dependencies",id:"install-required-dependencies",level:3},{value:"Install Node.js and npm",id:"install-nodejs-and-npm",level:3},{value:"2. Deploy the Website",id:"2-deploy-the-website",level:2},{value:"Clone the Repository",id:"clone-the-repository",level:3},{value:"Install Dependencies and Build",id:"install-dependencies-and-build",level:3},{value:"Set Proper Permissions",id:"set-proper-permissions",level:3},{value:"3. Configure Nginx",id:"3-configure-nginx",level:2},{value:"Create Nginx Configuration",id:"create-nginx-configuration",level:3},{value:"Enable the Site",id:"enable-the-site",level:3},{value:"Test Nginx Configuration",id:"test-nginx-configuration",level:3},{value:"4. Configure Let&#39;s Encrypt SSL",id:"4-configure-lets-encrypt-ssl",level:2},{value:"Obtain SSL Certificate",id:"obtain-ssl-certificate",level:3},{value:"Verify SSL Configuration",id:"verify-ssl-configuration",level:3},{value:"Set Up Automatic Renewal",id:"set-up-automatic-renewal",level:3},{value:"5. Firewall Configuration",id:"5-firewall-configuration",level:2},{value:"Configure UFW (Ubuntu/Debian)",id:"configure-ufw-ubuntudebian",level:3},{value:"Configure Firewalld (CentOS/RHEL/Rocky Linux)",id:"configure-firewalld-centosrhelrocky-linux",level:3},{value:"6. Performance Optimization",id:"6-performance-optimization",level:2},{value:"Enable HTTP/2",id:"enable-http2",level:3},{value:"Configure Browser Caching",id:"configure-browser-caching",level:3},{value:"Monitor Performance",id:"monitor-performance",level:3},{value:"7. Automated Deployment Script",id:"7-automated-deployment-script",level:2},{value:"8. Security Hardening",id:"8-security-hardening",level:2},{value:"Nginx Security Configuration",id:"nginx-security-configuration",level:3},{value:"System Security",id:"system-security",level:3},{value:"9. Monitoring and Maintenance",id:"9-monitoring-and-maintenance",level:2},{value:"Log Rotation",id:"log-rotation",level:3},{value:"Health Checks",id:"health-checks",level:3},{value:"Backup Strategy",id:"backup-strategy",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Useful Commands",id:"useful-commands",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"production-deployment---nginx--lets-encrypt",children:"Production Deployment - Nginx & Let's Encrypt"})}),"\n",(0,s.jsx)(n.p,{children:"This guide covers deploying the IT Security Study Guide website on a Linux production server using Nginx as a reverse proxy and Let's Encrypt for SSL certificates."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Linux server (Ubuntu 20.04+ or CentOS 8+ recommended)"}),"\n",(0,s.jsx)(n.li,{children:"Domain name pointing to your server's IP address"}),"\n",(0,s.jsx)(n.li,{children:"Root or sudo access to the server"}),"\n",(0,s.jsx)(n.li,{children:"Node.js 18+ installed"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"1-server-preparation",children:"1. Server Preparation"}),"\n",(0,s.jsx)(n.h3,{id:"update-system-packages",children:"Update System Packages"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Ubuntu/Debian\nsudo apt update && sudo apt upgrade -y\n\n# CentOS/RHEL/Rocky Linux\nsudo dnf update -y\n"})}),"\n",(0,s.jsx)(n.h3,{id:"install-required-dependencies",children:"Install Required Dependencies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Ubuntu/Debian\nsudo apt install -y nginx certbot python3-certbot-nginx git curl\n\n# CentOS/RHEL/Rocky Linux\nsudo dnf install -y nginx certbot python3-certbot-nginx git curl\nsudo dnf install -y epel-release  # For additional packages\n"})}),"\n",(0,s.jsx)(n.h3,{id:"install-nodejs-and-npm",children:"Install Node.js and npm"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Install Node.js 18.x\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Or for CentOS/RHEL/Rocky Linux\ncurl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -\nsudo dnf install -y nodejs npm\n"})}),"\n",(0,s.jsx)(n.h2,{id:"2-deploy-the-website",children:"2. Deploy the Website"}),"\n",(0,s.jsx)(n.h3,{id:"clone-the-repository",children:"Clone the Repository"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create a directory for the application\nsudo mkdir -p /var/www/it-security\nsudo chown -R $USER:$USER /var/www/it-security\n\n# Clone the repository\ncd /var/www/it-security\ngit clone https://github.com/Krydix/It-Security-Website.git .\n"})}),"\n",(0,s.jsx)(n.h3,{id:"install-dependencies-and-build",children:"Install Dependencies and Build"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Install npm dependencies\nnpm install\n\n# Build the static site\nnpm run build\n"})}),"\n",(0,s.jsx)(n.h3,{id:"set-proper-permissions",children:"Set Proper Permissions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Set ownership to www-data (Ubuntu) or nginx (CentOS)\n# Ubuntu/Debian\nsudo chown -R www-data:www-data /var/www/it-security\n\n# CentOS/RHEL/Rocky Linux\nsudo chown -R nginx:nginx /var/www/it-security\n\n# Set proper permissions\nsudo chmod -R 755 /var/www/it-security\n"})}),"\n",(0,s.jsx)(n.h2,{id:"3-configure-nginx",children:"3. Configure Nginx"}),"\n",(0,s.jsx)(n.h3,{id:"create-nginx-configuration",children:"Create Nginx Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Create the Nginx server block configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/nginx/sites-available/it-security\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Add the following configuration (replace ",(0,s.jsx)(n.code,{children:"your-domain.com"})," with your actual domain):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-nginx",children:'server {\n    listen 80;\n    server_name your-domain.com www.your-domain.com;\n    \n    # Redirect all HTTP traffic to HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name your-domain.com www.your-domain.com;\n    \n    # Document root\n    root /var/www/it-security/build;\n    index index.html;\n    \n    # SSL Configuration (will be added by Certbot)\n    # ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;\n    # ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;\n    \n    # Security headers\n    add_header X-Frame-Options "SAMEORIGIN" always;\n    add_header X-Content-Type-Options "nosniff" always;\n    add_header X-XSS-Protection "1; mode=block" always;\n    add_header Referrer-Policy "no-referrer-when-downgrade" always;\n    add_header Content-Security-Policy "default-src \'self\' \'unsafe-inline\' \'unsafe-eval\' data: https:; img-src \'self\' data: https:;" always;\n    \n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_proxied expired no-cache no-store private must-revalidate auth;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/javascript\n        application/xml+rss\n        application/json;\n    \n    # Handle static assets\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {\n        expires 1y;\n        add_header Cache-Control "public, immutable";\n        try_files $uri =404;\n    }\n    \n    # Handle routes (for SPA)\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n    \n    # Security: Hide nginx version\n    server_tokens off;\n    \n    # Prevent access to hidden files\n    location ~ /\\. {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n    \n    # Logging\n    access_log /var/log/nginx/it-security.access.log;\n    error_log /var/log/nginx/it-security.error.log;\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"enable-the-site",children:"Enable the Site"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Ubuntu/Debian\nsudo ln -s /etc/nginx/sites-available/it-security /etc/nginx/sites-enabled/\n\n# CentOS/RHEL/Rocky Linux (place config directly in conf.d)\nsudo cp /etc/nginx/sites-available/it-security /etc/nginx/conf.d/it-security.conf\n"})}),"\n",(0,s.jsx)(n.h3,{id:"test-nginx-configuration",children:"Test Nginx Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo nginx -t\n"})}),"\n",(0,s.jsx)(n.p,{children:"If the test is successful, restart Nginx:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo systemctl restart nginx\nsudo systemctl enable nginx\n"})}),"\n",(0,s.jsx)(n.h2,{id:"4-configure-lets-encrypt-ssl",children:"4. Configure Let's Encrypt SSL"}),"\n",(0,s.jsx)(n.h3,{id:"obtain-ssl-certificate",children:"Obtain SSL Certificate"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Replace your-domain.com with your actual domain\nsudo certbot --nginx -d your-domain.com -d www.your-domain.com\n"})}),"\n",(0,s.jsx)(n.p,{children:"Follow the prompts:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Enter your email address"}),"\n",(0,s.jsx)(n.li,{children:"Agree to the terms of service"}),"\n",(0,s.jsx)(n.li,{children:"Choose whether to share your email with EFF"}),"\n",(0,s.jsx)(n.li,{children:"Certbot will automatically configure SSL"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"verify-ssl-configuration",children:"Verify SSL Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Check certificate status\nsudo certbot certificates\n\n# Test automatic renewal\nsudo certbot renew --dry-run\n"})}),"\n",(0,s.jsx)(n.h3,{id:"set-up-automatic-renewal",children:"Set Up Automatic Renewal"}),"\n",(0,s.jsx)(n.p,{children:"Create a cron job for automatic certificate renewal:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo crontab -e\n"})}),"\n",(0,s.jsx)(n.p,{children:"Add the following line to renew certificates twice daily:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"0 12 * * * /usr/bin/certbot renew --quiet\n"})}),"\n",(0,s.jsx)(n.h2,{id:"5-firewall-configuration",children:"5. Firewall Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"configure-ufw-ubuntudebian",children:"Configure UFW (Ubuntu/Debian)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo ufw allow ssh\nsudo ufw allow 'Nginx Full'\nsudo ufw enable\nsudo ufw status\n"})}),"\n",(0,s.jsx)(n.h3,{id:"configure-firewalld-centosrhelrocky-linux",children:"Configure Firewalld (CentOS/RHEL/Rocky Linux)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\nsudo firewall-cmd --list-all\n"})}),"\n",(0,s.jsx)(n.h2,{id:"6-performance-optimization",children:"6. Performance Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"enable-http2",children:"Enable HTTP/2"}),"\n",(0,s.jsxs)(n.p,{children:["HTTP/2 is already enabled in the Nginx configuration above with the ",(0,s.jsx)(n.code,{children:"http2"})," directive."]}),"\n",(0,s.jsx)(n.h3,{id:"configure-browser-caching",children:"Configure Browser Caching"}),"\n",(0,s.jsx)(n.p,{children:"The Nginx configuration includes optimal caching headers for static assets."}),"\n",(0,s.jsx)(n.h3,{id:"monitor-performance",children:"Monitor Performance"}),"\n",(0,s.jsx)(n.p,{children:"Install and configure monitoring tools:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Install htop for system monitoring\nsudo apt install htop  # Ubuntu/Debian\nsudo dnf install htop  # CentOS/RHEL/Rocky Linux\n\n# Monitor Nginx logs\nsudo tail -f /var/log/nginx/it-security.access.log\nsudo tail -f /var/log/nginx/it-security.error.log\n"})}),"\n",(0,s.jsx)(n.h2,{id:"7-automated-deployment-script",children:"7. Automated Deployment Script"}),"\n",(0,s.jsx)(n.p,{children:"Create a deployment script for easy updates:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo nano /var/www/it-security/deploy.sh\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\n# IT Security Website Deployment Script\nset -e\n\necho "\ud83d\ude80 Starting deployment..."\n\n# Navigate to project directory\ncd /var/www/it-security\n\n# Pull latest changes\necho "\ud83d\udce5 Pulling latest changes..."\ngit pull origin main\n\n# Install dependencies\necho "\ud83d\udce6 Installing dependencies..."\nnpm ci --production\n\n# Build the project\necho "\ud83d\udd28 Building project..."\nnpm run build\n\n# Set permissions\necho "\ud83d\udd10 Setting permissions..."\nsudo chown -R nginx:nginx /var/www/it-security\nsudo chmod -R 755 /var/www/it-security\n\n# Test nginx configuration\necho "\ud83e\uddea Testing Nginx configuration..."\nsudo nginx -t\n\n# Reload nginx\necho "\ud83d\udd04 Reloading Nginx..."\nsudo systemctl reload nginx\n\necho "\u2705 Deployment completed successfully!"\necho "\ud83c\udf10 Website is available at: https://your-domain.com"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Make the script executable:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"chmod +x /var/www/it-security/deploy.sh\n"})}),"\n",(0,s.jsx)(n.h2,{id:"8-security-hardening",children:"8. Security Hardening"}),"\n",(0,s.jsx)(n.h3,{id:"nginx-security-configuration",children:"Nginx Security Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Add additional security configurations to your Nginx server block:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-nginx",children:'# Rate limiting\nlimit_req_zone $binary_remote_addr zone=main:10m rate=10r/s;\n\nserver {\n    # Apply rate limiting\n    limit_req zone=main burst=20 nodelay;\n    \n    # Hide server information\n    more_clear_headers Server;\n    \n    # HTTPS Security Headers\n    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;\n    add_header X-Frame-Options "DENY" always;\n    add_header X-Content-Type-Options "nosniff" always;\n    add_header X-XSS-Protection "1; mode=block" always;\n    \n    # ... rest of your configuration\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"system-security",children:"System Security"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Keep system updated\nsudo apt update && sudo apt upgrade -y  # Ubuntu/Debian\nsudo dnf update -y  # CentOS/RHEL/Rocky Linux\n\n# Configure automatic security updates\nsudo apt install unattended-upgrades  # Ubuntu/Debian\nsudo dpkg-reconfigure unattended-upgrades\n"})}),"\n",(0,s.jsx)(n.h2,{id:"9-monitoring-and-maintenance",children:"9. Monitoring and Maintenance"}),"\n",(0,s.jsx)(n.h3,{id:"log-rotation",children:"Log Rotation"}),"\n",(0,s.jsx)(n.p,{children:"Nginx logs are automatically rotated by logrotate. Check the configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cat /etc/logrotate.d/nginx\n"})}),"\n",(0,s.jsx)(n.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,s.jsx)(n.p,{children:"Create a simple health check script:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# Simple health check\ncurl -f https://your-domain.com > /dev/null\nif [ $? -eq 0 ]; then\n    echo "\u2705 Website is healthy"\nelse\n    echo "\u274c Website is down"\n    # Add notification logic here\nfi\n'})}),"\n",(0,s.jsx)(n.h3,{id:"backup-strategy",children:"Backup Strategy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Backup script\n#!/bin/bash\nBACKUP_DIR="/backup/it-security"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Backup website files\ntar -czf $BACKUP_DIR/website_$DATE.tar.gz /var/www/it-security\n\n# Backup Nginx configuration\ntar -czf $BACKUP_DIR/nginx_config_$DATE.tar.gz /etc/nginx\n\n# Backup SSL certificates\ntar -czf $BACKUP_DIR/ssl_certs_$DATE.tar.gz /etc/letsencrypt\n\necho "Backup completed: $DATE"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Port 80/443 not accessible"}),": Check firewall settings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SSL certificate issues"}),": Verify domain DNS settings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Nginx won't start"}),": Check configuration with ",(0,s.jsx)(n.code,{children:"sudo nginx -t"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Permission denied"}),": Verify file ownership and permissions"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"useful-commands",children:"Useful Commands"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Check Nginx status\nsudo systemctl status nginx\n\n# View Nginx logs\nsudo journalctl -u nginx -f\n\n# Test SSL certificate\nopenssl s_client -connect your-domain.com:443\n\n# Check certificate expiration\nsudo certbot certificates\n"})}),"\n",(0,s.jsx)(n.p,{children:"This comprehensive setup provides a production-ready deployment with Nginx, SSL encryption, security hardening, and automated deployment capabilities."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);